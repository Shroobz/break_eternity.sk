options:
	max_e: 4 # at what amount of e's to use (e^layer)mag in format

on load:
	set {ExpLimit} to 9*10^15 # if mantissa is above this, increase a layer
	set {LayerDown} to log(9*10^15) # if layer isn't 0 and mantissa is below this, decrease a layer
	set {FirstNegLayer} to 1/(9*10^15) # At layer 0, smaller non-zero numbers than this become layer 1 numbers with negative mag
	set {MaxSignificantDigits} to 17




	set {e} to 2.7182818284590452353602874713527 # thanks random website
	

# the local functions


function neg(n: numbers) :: numbers:
	return ({_n::1}, {_n::2}, {_n::3}*-1)

local function fromnumber(n: number) :: numbers:
	return normalize((0, abs({_n}), Math_Sign({_n})))

local function Math_Sign(n: number) :: number:
	return -1 if {_n} < 0
	return 1 if {_n} > 0
	return 0

local function normalize(n: numbers) :: numbers:
	# this explanation is from Patashu since I can't explain anything lmao
	# PSEUDOCODE:
  # Whenever we are partially 0 (sign is 0 or mag and layer is 0), make it fully 0.
  # Whenever we are at or hit layer 0, extract sign from negative mag.
  # If layer === 0 and mag < FIRST_NEG_LAYER (1/9e15), shift to 'first negative layer' (add layer, log10 mag).
  # While abs(mag) > EXP_LIMIT (9e15), layer += 1, mag = maglog10(mag).
  # While abs(mag) < LAYER_DOWN (15.954) and layer > 0, layer -= 1, mag = pow(10, mag).
  #       When we're done, all of the following should be true OR one of the numbers is not IsFinite OR layer is not IsInteger (error state):
  # Any 0 is totally zero (0, 0, 0).
  # Anything layer 0 has mag 0 OR mag > 1/9e15 and < 9e15.
  # Anything layer 1 or higher has abs(mag) >= 15.954 and < 9e15.
  # We will assume in calculations that all Decimals are either erroneous or satisfy these criteria. (Otherwise: Garbage in, garbage out.)
	if {_n::3} is 0:
		return (0, 0, 0)
	if {_n::1} and {_n::2} = 0: 
		return (0, 0, 0)
	if {_n::1} is 0: 
		if {_n::2} < 0: 
			set {_n::2} to {_n::2}*-1
			set {_n::3} to {_n::3}*-1
			return {_n::*}
		if {_n::2} < {FirstNegLayer}: 
			add 1 to {_n::1}
			set {_n::2} to log({_n::2})
			return {_n::*}
	set {_absmag} to abs({_n::2})
	set {_signmag} to Math_Sign({_n::2})
	if {_absmag} >= {ExpLimit}:
		add 1 to {_n::1}
		set {_n::2} to log({_absmag})*{_signmag}
		return {_n::*}
	else:
		if {_n::1} > 0:
			while {_absmag} < {LayerDown}:
				remove 1 from {_n::1}
				if {_n::1} = 0:
					set {_n::2} to 10^{_n::2}
					stop loop
				else:
					set {_n::2} to 10^{_n::2}
					set {_absmag} to abs({_n::2})
					set {_signmag} to Math_Sign({_n::2})
		if {_n::1} = 0:
			if {_n::2} < 0:
				set {_n::2} to {_n::2}*-1
				set {_n::3} to {_n::3}*-1
			else if {_n::2} = 0:
				set {_n::3} to 0
	return {_n::*}
 	
local function isfinite(n: numbers) :: boolean: # checks for infinity
	return false if {_n::1} or {_n::2} is infinity value
	return false if {_n::3} isn't -1, 0 or 1
	return true

local function createsupernum(layers: number = 0, mag: number = 0, sign: number = 0) :: numbers:
	if {_sign} = 0: # 0 = 0 :brain:
		set {_n::1} to 0
		set {_n::2} to 0
		set {_n::3} to 0
		return {_n::*}
	if {_sign} = 1 or -1: # that's crazy bro
		set {_n::1} to {_layers}
		set {_n::2} to {_mag}
		set {_n::3} to {_sign}
		return {_n::*}
	return NaN value # what else?

	
function breaketernityformat(n: numbers) :: string:
	if {_n::3} = 0: # returning 0 if number is 0
		return "0"
	if {_n::3} isn't -1, 0 or 1: # returning NaN if sign is illegal
		return "NaN"
	if {_n::1}, {_n::2} or {_n::3} isn't set: # returning NaN if not everything is set
		return "NaN" 
	if isfinite({_n::*}) is false:
		return "Infinity"
	if {_n::1} = 0:
		if abs({_n::2}*{_n::3}) is between 0.01 and 1000000:
			{_n::2} < 1000000 # 1m is scientific notation (because your mind can process up to 5 numbers instantly)
			return "%{_n::2}*{_n::3}%"
		return scientificnotation({_n::2}*{_n::3})
	if {_n::1} = 1:
		if {_n::2} < 1000000:
			{_n::2} > -1000000
			return "%10^({_n::2}-floor({_n::2}))*{_n::3}%e%floor({_n::2})%"
		if {_n::3} = 1: # removes the number before the first e and turns it into double scientific notation
			return "e%scientificnotation({_n::2})%"
		return "-e%scientificnotation({_n::2})%" # same as last conditional but negative
	if {_n::1} >= 2:
		if {_n::1} <= {@max_e}:
			set {_e} to "" # the {_e} part is "borrowed" from fantoccini
			loop {_n::1} times:
				set {_e} to "%{_e}%e"
			if {_n::2} >= 1000000: # if mag >= 1000000 add another layer of scientific notation
				if {_n::1}+1 >= {@max_e}: # if layers+1 >= max_e return breaketernityformat(layer+1, log(mag), sign)
					return breaketernityformat(createsupernum({_n::1}+1, log({_n::2}), {_n::3}))
				set {_e} to "%{_e}%e"
				set {_n::2} to log({_n::2})
			return "%{_e}%%{_n::2}%" if {_n::3} = 1
			return "-%{_e}%%{_n::2}%" # same as last line but negative
		return "(e^%{_n::1}%)%{_n::2}%" if {_n::3} = 1
		return "-(e^%{_n::1}%)%{_n::2}%" if {_n::3} = -1
	
function fromString(value: string) :: numbers: # ah shi, here we go again
	set {_originalValue} to {_value}
	# I'm supposed to do some LRUCache stuff right here but I don't even know what that is so we skip to x^^^y format yey!
	set {_pentationparts::*} to {_value} split at "^^^"
	if size of {_pentationparts::*} = 2:
		set {_base} to {_pentationparts::1} parsed as number
		set {_height} to {_pentationparts::2} parsed as number
		set {_heightparts::*} to {_pentationparts::2} split at ";"
		set {_payload} to 1
		if size of {_heightparts::*} = 2:
			set {_payload} to {_heightparts::2} parsed as number

			if {_payload} = infinity value:
				set {_payload} to 1
		if {_base} != infinity value:
			if {_height} != infinity value:
				parse if false = true: # pentation isn't added yet
					set {_result::*} to superpentate(({_base}, {_height}, {_payload}))
					set {_n::1} to {_result::1}
					set {_n::2} to {_result::2}
					set {_n::3} to {_result::3}
					return {_n::*} # dunno why patashu didn't just return result, we'll never know (unless he sees this)
	set {_tetrationparts::*} to {_value} split at "^^" # Handle x^^y format
	if size of {_tetrationparts::*} = 2:
		set {_base2} to {_tetrationparts::1} parsed as number
		set {_height2} to {_tetrationparts::2} parsed as number
		set {_heightparts::*} to {_tetrationparts::2} split at ";"
		set {_payload} to 1
		if size of {_heightparts::*} = 2:
			set {_payload} to {_heightparts::2} parsed as number
			if {_payload} = infinity value:
				set {_payload} to 1
		if {_base2} != infinity value:
			if {_height2} != infinity value:
				parse if false = true: # tetration is also not added yet
					set {_result::*} to supertetrate(({_base2}, {_height2}, {_payload}))
					set {_n::1} to {_result::1}
					set {_n::2} to {_result::2}
					set {_n::3} to {_result::3}
					return {_n::*} # hey! this is just pentate but with tetration! why didn't I copy and paste this!
	set {_powparts::*} to {_value} split at "^"
	if size of {_powparts::*} = 2:
		set {_base3} to {_powparts::1} parsed as number
		set {_exponent} to {_powparts::2} parsed as number

		if {_base3} != infinity value:
			if {_exponent} != infinity value:
				parse if false = true:
					set {_result2::*} to superpow({_base3}, {_exponent})
					set {_n::1} to {_result2::1}
					set {_n::2} to {_result2::2}
					set {_n::3} to {_result2::3}
					return {_n::*}
	# Handle various cases involving it being a Big Number
	
	# set {_value} to {_value} in lowercase
	# set {_ptparts::*} to {_value} split at "pt" # Handle X PT Y format

	# if size of {_ptparts::*} = 2:



	
	
function superpow(n: numbers, n2: numbers) :: numbers: # every 'a' = 'n' and every 'b' = 'n2'
	if size of {_n::*} = 1: # if size of {_n} = 1 {_n} is probably a number
		set {_n::*} to fromnumber({_n::1})
	if size of {_n2::*} = 1:
		set {_n2::*} to fromnumber({_n2::1})
	# if a = 0, return 0 unless b = 0, then return 1
	if {_n::3} = 0:
		if {_n2::3} = 0:
			return 1
		else:
			return 0
	# if a = 1 return 1
	if all:
		{_n::3} = 1 
		{_n::1} = 0 
		{_n::2} = 1
	then:
		return {_n::*}
	# if b = 0 return 1
	if {_n2::3} = 0:
		return (0, 1, 1)
	# if b = 1 return a
	if all:
		{_n2::1} = 0 
		{_n2::3} = 1 
		{_n2::2} = 1
	then:
		return {_n::*}
	set {_result::*} to superpow10(supermul(superabslog10({_n::*}), {_n2::*}))
	if {_n::3} = -1:
		if mod(abs(supertonumber({_n2::*})), 2) = 1:
			return ({_result::1}, {_result::2}, {_result::3}*-1)
		else if mod(abs(supertonumber({_n2::*})), 2) = 0:
			return {_result::*}
		return NaN value
	return normalize({_result::*})
function supertonumber(n: numbers) :: number:
	if {_n::1} = infinity value:
		return NaN value
	if {_n::1} = 0:
		return {_n::3} * {_n::2}
	else if {_n::1} = 1:
		return {_n::3} * 10^{_n::2}
	else:
		return infinity value
function superpow10(n: numbers) :: numbers:
	# There are four cases we need to consider:
	# 1) positive sign, positive mag (e15, ee15): +1 layer (e.g. 10^15 becomes e15, 10^e15 becomes ee15)
	# 2) negative sign, positive mag (-e15, -ee15): +1 layer but sign and mag sign are flipped (e.g. 10^-15 becomes e-15, 10^-e15 becomes ee-15)
	# 3) positive sign, negative mag (e-15, ee-15): layer 0 case would have been handled in the Math.pow check, so just return 1
	# 4) negative sign, negative mag (-e-15, -ee-15): layer 0 case would have been handled in the Math.pow check, so just return 1
	if isfinite({_n::*}) = false:
		return NaN value
	
	set {_a::*} to {_n::*} # Handle layer 0 case
	if {_a::1} = 0:
		set {_newmag} to 10^{_a::2}
		if all:
			{_newmag} != infinity value
			abs({_newmag}) >= 0.1
		then:
			return normalize(0, {_newmag}, 1)
		else:
			if {_a::3} = 0:
				return (0, 1, 1)
			else:
				set {_a::*} to ({_a::1}+1, log({_a::2}), {_a::3})
	# Handle all 4 layer 1+ cases individually
	if all:
		{_a::3} > 0
		{_a::2} >= 0
	then:
		return ({_a::1} + 1, {_a::2}, {_a::3})
	if all:
		{_a::3} < 0
		{_a::2} >= 0
	then:
		return ({_a::1} + 1, {_a::2} * -1, {_a::3} * -1)
	return 1

function superabslog10(n: numbers) :: numbers:
	if {_n::3} = 0:
		return NaN value
	else if {_n::1} > 0:
		return ({_n::1} - 1, abs({_n::2}), Math_Sign({_n::2}))
	else:
		return (0, log({_n::2}), 1)
function cmp(n: numbers, n2: numbers) :: number:
	if size of {_n::*} = 1: # if size of {_n} = 1 {_n} is probably a number
		set {_n::*} to fromnumber({_n::1})
	if size of {_n2::*} = 1:
		set {_n2::*} to fromnumber({_n2::1})
	if {_n::3} > {_n2::3}:
		return 1
	if {_n::3} < {_n2::3}:
		return -1
	return {_n::3} * cmpabs({_n::*}, {_n2::*})
function cmpabs(n: numbers, n2: numbers) :: number:
	if size of {_n::*} = 1:
		set {_n::*} to fromnumber({_n::1})
	if size of {_n2::*} = 1:
		set {_n2::*} to fromnumber({_n2::1})
	if {_n::2} > 0:
		set {_layera} to {_n::1}
	else:
		set {_layera} to {_n::1}*-1
	if {_n2::2} > 0:
		set {_layerb} to {_n2::1}
	else:
		set {_layerb} to {_n2::1}*-1
	if {_layera} > {_layerb}:
		return 1
	if {_layera} < {_layerb}:
		return -1
	if {_n::2} > {_n2::2}:
		return 1
	if {_n::2} < {_n2::2}:
		return -1
	return 0
function superlt(n: numbers, n2: numbers) :: boolean:
	if cmp({_n::*}, {_n2::*}) = -1:
		return true
	return false
function supergte(n: numbers, n2: numbers) :: boolean:
	if superlt({_n::*}, {_n2::*}) = false:
		return true
	return false
function superlte(n: numbers, n2: numbers) :: boolean:
	if supergte({_n::*}, {_n2::*}) = false:
		return true
	return false
function supergt(n: numbers, n2: numbers) :: boolean:
	if cmp({_n::*}, {_n2::*}) = 1:
		return true
	return false
function maxabs(n: numbers, n2: numbers) :: numbers:
	if cmpabs({_n::*}, {_n2::*}) < 0:
		return {_n2::*}
	else:
		return {_n::*}

function superadd(n: numbers, n2: numbers) :: numbers:
	if size of {_n::*} = 1: # if size of {_n} = 1 {_n} is probably a number
		set {_n::*} to fromnumber({_n::1})
	if size of {_n2::*} = 1:
		set {_n2::*} to fromnumber({_n2::1}) # inf check

	if isfinite({_n::*}) = false:
		return {_n::*}
	if isfinite({_n2::*}) = false:
		return {_n2::*} # if one of the numbers = 0 return the other number

	if {_n::3} = 0:
		return {_n2::*}
	if {_n2::3} = 0:
		return {_n::*} # Adding a number to its negation produces 0

	if all:
		{_n::3} = {_n2::3}*-1
		{_n::1} = {_n2::1}
		{_n::2} = {_n2::2}
	then:
		return (0, 0, 0) # If one of the numbers is layer 2 or higher return the biggest number

	if max({_n::1}, {_n2::1}) >= 2:
		return maxabs({_n::*}, {_n2::*})

	if cmpabs({_n::*}, {_n2::*}) > 0:
		set {_a::*} to {_n::*}
		set {_b::*} to {_n2::*}
	else:
		set {_a::*} to {_n2::*}
		set {_b::*} to {_n::*}
	if all:
		{_a::1} = 0
		{_b::1} = 0
	then:
		return fromnumber({_a::3} * {_a::2} + {_b::3} * {_b::2})
	
	set {_layera} to {_a::1}*Math_Sign({_a::2})
	set {_layerb} to {_b::1}*Math_Sign({_b::2}) # if one of the numbers is 2+ layers higher than the other, take the bigger number


	if {_layera} - {_layerb} >= 2:
		return {_a::*}
	

	if all:
		{_layera} = 0
		{_layerb} = -1
	then:
		if abs({_b::2} - log({_a::2})) > {MaxSignificantDigits}:
			return {_a::*}
		else:
			set {_magdiff} to 10^(log({_a::2}) - {_b::2})
			set {_mantissa} to {_b::3} + {_a::3} * {_magdiff}
			return normalize(1, {_b::2} + log(abs({_mantissa})), Math_Sign({_mantissa}))
	if all:
		{_layera} = 1
		{_layerb} = 0
	then:
		if abs({_a::2} - log({_b::2})) > {MaxSignificantDigits}:
			return {_a::*}
		else:
			set {_magdiff} to 10^({_a::2} - log({_b::2}))
			set {_mantissa} to {_b::3} + {_a::3} * {_magdiff}
			return normalize(1, log({_b::2}) + log(abs({_mantissa})), Math_Sign({_mantissa}))
	if abs({_a::2} - {_b::2}) > {MaxSignificantDigits}:
		return {_a::*}
	else:
		set {_magdiff2} to 10^({_a::2} - {_b::2}) # why the 2, Patashu

		set {_mantissa2} to {_b::3} + {_a::3} * {_magdiff2}

		return normalize(1, {_b::2} + log(abs({_mantissa2})), Math_Sign({_mantissa2}))

	
	






function scientificnotation(n: number) :: string: # most efficient scientific notation I know (that's a lie I can make this like 12% faster)
	return "0" if {_n} = 0 # return 0 if n is 0
	if {_n} > 0: # case for positive numbers
		set {_n2} to floor(log({_n}))
		set {_n} to log({_n})
		return "%10^({_n}-{_n2})%e%{_n2}%"
	else if {_n} < 0: # case for negative numbers
		set {_n} to abs({_n})
		set {_n2} to floor(log({_n}))
		set {_n} to log({_n})
		return "-%10^({_n}-{_n2})%e%{_n2}%"
	
function superplus(n: numbers, n2: numbers) :: numbers:
	return superadd({_n::*}, {_n2::*})
function superminus(n: numbers, n2: numbers) :: numbers:
	return supersub({_n::*}, {_n2::*})
function supersubtract(n: numbers, n2: numbers) :: numbers:
	return supersub({_n::*}, {_n2::*})
function supersub(n: numbers, n2: numbers) :: numbers:
	return superadd({_n::*}, neg({_n2::*}))

function supermul(n: numbers, n2: numbers) :: numbers:
	if size of {_n::*} = 1: # if size of {_n} = 1 {_n} is probably a number
		set {_n::*} to fromnumber({_n::1})
	if size of {_n2::*} = 1:
		set {_n2::*} to fromnumber({_n2::1})# inf check

	if isfinite({_n::*}) = false:
		return {_n::*}
	if isfinite({_n2::*}) = false:
		return {_n2::*} # if one of the numbers = 0 return 0

	if any:
		{_n::3} = 0
		{_n2::3} = 0
	then:
		return (0, 0, 0) # Multiplying a number by its own reciprocal yields 1 or -1

	if all:
		{_n::1} and {_n2::1} >= 1 # Weird that Patashu didn't check if layer >= 1
		{_n::1} = {_n2::1}
		{_n::2} = {_n2::2} * -1
	then:
		return (0, 1, {_n::3}*{_n2::3})

	# which number is bigger in terms of its multiplicative distance from 1?
	if {_n::1} > {_n2::1}: # pretty sure skript doesn't have if x or x and x so welcome to this hell I call code
		set {_a::*} to {_n::*}
		set {_b::*} to {_n2::*}
	else if {_n::1} = {_n2::1}:
		if abs({_n::2}) > abs({_n2::2}):
			set {_a::*} to {_n::*}
			set {_b::*} to {_n2::*}
		else:
			set {_a::*} to {_n2::*}
			set {_b::*} to {_n::*}
	else:
		set {_a::*} to {_n2::*}
		set {_b::*} to {_n::*}
	
	if all:
		{_a::1} = 0
		{_b::1} = 0
	then:
		return fromnumber({_a::3} * {_b::3} * {_a::2} * {_b::2}) # If one of the numbers is layer 3 or higher or one of the numbers is 2+ layers bigger than the other, take the bigger number
	if any:
		{_a::1} >= 3
		{_a::1} - {_b::1} >= 2
	then:
		return normalize({_a::1}, {_a::2}, {_a::3} * {_b::3})
	
	if all:
		{_a::1} = 1
		{_b::1} = 0
	then:
		return normalize(1, {_a::2} + log({_b::2}), {_a::3}*{_b::3})
	
	if all:
		{_a::1} = 1
		{_b::1} = 1
	then:
		return normalize(1, {_a::2} + {_b::2}, {_a::3}*{_b::3})
	
	if all:
		{_a::1} = 2
		{_b::1} = 1
	then:
		set {_newmag::*} to superadd((1, abs({_a::2}), Math_Sign({_a::2})), (0, abs({_b::2}), Math_Sign({_b::2})))
		return normalize({_newmag::1} + 1, {_newmag::3} * {_newmag::2}, {_a::3} * {_b::3})
	
	if all:
		{_a::1} = 2
		{_b::1} = 2
	then:
		set {_newmag::*} to superadd((1, abs({_a::2}), Math_Sign({_a::2})), (1, abs({_b::2}), Math_Sign({_b::2})))
		return normalize({_newmag::1} + 1, {_newmag::3} * {_newmag::2}, {_a::3} * {_b::3})

	# we warn the dam mods
	broadcast "Bad arguments to mul: %{_n::*}%, %{_n2::*}%"

function supermultiply(n: numbers, n2: numbers) :: numbers:
	return supermul({_n::*}, {_n2::*})
function supertimes(n: numbers, n2: numbers) :: numbers:
	return supermul({_n::*}, {_n2::*})
function superdiv(n: numbers, n2: numbers) :: numbers:
	return supermul({_n::*}, superrecip({_n2::*}))
function superdivide(n: numbers, n2: numbers) :: numbers:
	return superdiv({_n::*}, {_n2::*})
function superdivideby(n: numbers, n2: numbers) :: numbers:
	return superdiv({_n::*}, {_n2::*})
function superdividedby(n: numbers, n2: numbers) :: numbers:
	return superdiv({_n::*}, {_n2::*})

function superrecip(n: numbers) :: numbers:
	if {_n::2} = 0:
		return NaN value
	else if {_n::1} = 0:
		return (0, 1/{_n::2}, {_n::3})
	else:
		return ({_n::1}, {_n::2} * -1, {_n::3})
	
function superlog10(n: numbers) :: numbers:
	if {_n::3} <= 0:
		return NaN value
	else if {_n::1} > 0:
		return ({_n::1} - 1, abs({_n::2}), Math_Sign({_n::2}))
	else:
		return (0, log({_n::2}), 1)

function superlog(n: numbers, base: numbers) :: numbers:
	if size of {_n::*} = 1: # if size of {_n} = 1 {_n} is probably a number
		set {_n::*} to fromnumber({_n::1})
	if size of {_base::*} = 1:
		set {_n2::*} to fromnumber({_n2::1})
	if {_n::3} <= 0:
		return NaN value
	if {_base::3} <= 0:
		return NaN value
	if all:
		{_base::3} = 1
		{_base::1} = 0
		{_base::2} = 1
	then:
		return NaN value
	if all:
		{_n::1} = 0
		{_base::1} = 0
	then:
		return (0, log({_n::2}, {_base::2}), 1)
	return superdiv(superlog10({_n::*}), superlog10({_base::*}))


# this is maybe coming maybe soon maybe not maybe maybe
# function supertetrate(n: numbers, height: number) :: numbers: # finally a god damn regular number
# 	# wtf is payload, patashu, I'll just not.
# 	if {_height} = 1: # x^^1 = x
# 		return {_n::*}
# 	if {_height} = 0: # x^^0 = 1
# 		return (0, 1, 1)
# 	if {_n::*} = (0, 1, 1): # 1^^x = 1
# 		return (0, 1, 1)
# 	if {_n::*} = (0, 1, -1): # -1^^x = -1
# 		return (0, 1, -1)
	
# 	# no infinite height for you! haha losers

# 	# 0^^1 = 0, 0^^2 = 1, 0^^3 = 0, etc
# 	if {_n::3} = 0:
# 		set {_result} to abs(mod({_height}+1, 2))
# 		if {_result} >= 1:
# 			set {_result} to 2 - {_result}
# 		return fromnumber({_result})
	





# Placeholders used for testing below this line /-/

command supergte <numbers> <numbers>:
	trigger:
		broadcast supergte(arg-1, arg-2)
command superlte <numbers> <numbers>:
	trigger:
		broadcast superlte(arg-1, arg-2)
command supergt <numbers> <numbers>:
	trigger:
		broadcast supergt(arg-1, arg-2)
command superlt <numbers> <numbers>:
	trigger:
		broadcast superlt(arg-1, arg-2)

command superadd <numbers> <numbers>:
	trigger:
		broadcast breaketernityformat(superadd(arg-1, arg-2))

command supermul <numbers> <numbers>:
	trigger:
		broadcast breaketernityformat(supermul(arg-1, arg-2))
	
command superdiv <numbers> <numbers>:
	trigger:
		broadcast breaketernityformat(superdiv(arg-1, arg-2))
			
command superpow <numbers> <numbers>:
	trigger:
		broadcast breaketernityformat(superpow(arg-1, arg-2))

command maxabs <numbers> <numbers>:
	trigger:
		broadcast maxabs(arg-1, arg-2)



command fromnumber <number>:
	trigger:
		broadcast fromnumber(arg)

command normalize <number> <number> <number>:
	trigger:
		broadcast normalize((arg-1, arg-2, arg-3))	
command superformat <number> <number> <number>:
	trigger:
		broadcast breaketernityformat(createsupernum(arg-1, arg-2, arg-3))
	
on join:
	wait 3 seconds
	set {money::%player's uuid%::*} to createsupernum(20, 1, 1)
	while player is online:
		wait 4 ticks
		set title of player's scoreboard to "numbatest"
		set {money::%player's uuid%::2} to {money::%player's uuid%::2}/50
		set {money::%player's uuid%::*} to normalize({money::%player's uuid%::*})
		broadcast ""
		broadcast {money::%player's uuid%::*}
		set line 1 of player's scoreboard to breaketernityformat({money::%player's uuid%::*})
		
